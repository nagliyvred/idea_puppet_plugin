/* The following code was generated by JFlex 1.4.3 on 13/05/12 10:04 AM */

package com.thoughtworks.idea.puppet.parser;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.thoughtworks.idea.puppet.psi.PuppetTypes;

import static com.thoughtworks.idea.puppet.parsing.PuppetParserDefinition.PUPPET_LINE_COMMENT;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/05/12 10:04 AM from the specification file
 * <tt>/Users/edudin/opensource/idea_puppet_plugin/src/com/thoughtworks/idea/puppet/parser/_PuppetLexer.flex</tt>
 */
public class _PuppetLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\0\1\14"+
    "\1\6\1\17\2\0\1\13\1\52\1\53\1\10\1\60\1\57\1\60"+
    "\1\0\1\7\12\2\1\16\1\57\1\0\1\55\1\56\1\0\1\41"+
    "\2\1\1\36\1\1\1\24\1\20\11\1\1\54\2\1\1\27\5\1"+
    "\1\32\1\1\1\57\1\11\1\57\1\0\1\15\1\0\1\37\1\1"+
    "\1\26\1\42\1\23\1\43\1\46\1\50\1\21\1\1\1\45\1\22"+
    "\1\33\1\44\1\35\1\34\1\1\1\30\1\40\1\47\1\12\1\31"+
    "\1\1\1\25\1\1\1\51\1\52\1\0\1\53\54\0\1\1\12\0"+
    "\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u013f\1\31\0"+
    "\162\1\4\0\14\1\16\0\5\1\11\0\1\1\213\0\1\1\13\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\54\1\1\0"+
    "\46\1\1\0\5\1\4\0\202\1\10\0\105\1\1\0\46\1\2\0"+
    "\2\1\6\0\20\1\41\0\46\1\2\0\1\1\7\0\47\1\110\0"+
    "\33\1\5\0\3\1\56\0\32\1\5\0\13\1\25\0\12\2\4\0"+
    "\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\2"+
    "\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0\3\1\60\0"+
    "\46\1\13\0\1\1\u0152\0\66\1\3\0\1\1\22\0\1\1\7\0"+
    "\12\1\4\0\12\2\25\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0\2\1\1\0"+
    "\3\1\4\0\12\2\2\1\23\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1"+
    "\1\0\1\1\7\0\12\2\2\0\3\1\20\0\11\1\1\0\3\1"+
    "\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\22\0\1\1\17\0\2\1\4\0\12\2\25\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\36\0\2\1\1\0\3\1\4\0\12\2\1\0\1\1\21\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\10\1\1\0\3\1"+
    "\55\0\11\2\25\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
    "\1\0\5\1\46\0\2\1\4\0\12\2\25\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1"+
    "\1\0\2\1\4\0\12\2\25\0\10\1\1\0\3\1\1\0\27\1"+
    "\1\0\20\1\46\0\2\1\4\0\12\2\25\0\22\1\3\0\30\1"+
    "\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1\1\0\2\1"+
    "\14\0\7\1\11\0\12\2\47\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\11\0\12\2\2\0\2\1"+
    "\42\0\1\1\37\0\12\2\26\0\10\1\1\0\42\1\35\0\4\1"+
    "\164\0\42\1\1\0\5\1\1\0\2\1\25\0\12\2\6\0\6\1"+
    "\112\0\46\1\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1"+
    "\6\0\7\1\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1"+
    "\1\0\1\1\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1"+
    "\2\0\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1"+
    "\1\0\1\1\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1"+
    "\16\0\11\2\56\0\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1"+
    "\5\0\113\1\25\0\15\1\1\0\4\1\16\0\22\1\16\0\22\1"+
    "\16\0\15\1\1\0\3\1\17\0\64\1\43\0\1\1\4\0\1\1"+
    "\3\0\12\2\46\0\12\2\6\0\130\1\10\0\51\1\127\0\35\1"+
    "\51\0\12\2\36\1\2\0\5\1\u038b\0\154\1\224\0\234\1\4\0"+
    "\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0"+
    "\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\164\0"+
    "\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0\12\1\1\0"+
    "\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0\5\1\u0ebb\0"+
    "\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0"+
    "\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0\30\1\70\0"+
    "\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0"+
    "\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0\1\1\1\0"+
    "\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0"+
    "\14\1\164\0\5\1\1\0\207\1\23\0\12\2\7\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\2\1\1\1\3\1\4\3\2\1\5\21\2"+
    "\1\6\1\7\1\2\1\5\1\2\1\10\2\0\1\4"+
    "\1\0\1\11\2\0\2\10\1\12\13\10\1\0\5\10"+
    "\1\13\1\4\1\14\1\0\16\10\1\15\1\0\3\10"+
    "\1\4\1\16\32\10\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\61\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\61\0\61\0\u04fa\0\u052b\0\u055c"+
    "\0\142\0\142\0\u058d\0\u05be\0\u05ef\0\61\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\142\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\61\0\u0a25\0\u0651\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u08ff\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\61\0\142\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\6\1\7\2\2\1\3"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\3"+
    "\1\16\1\17\1\3\1\20\1\21\1\22\1\3\1\23"+
    "\1\3\1\24\1\3\1\25\1\3\1\26\1\27\1\30"+
    "\1\31\1\32\2\3\1\33\2\3\1\34\1\35\1\36"+
    "\1\37\1\2\1\12\1\40\62\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\21\41\1\0\10\41\2\0"+
    "\1\41\6\0\1\4\61\0\3\5\53\0\4\6\1\0"+
    "\54\6\10\0\1\44\50\0\3\10\2\0\4\10\1\45"+
    "\1\10\1\46\1\0\44\10\3\11\2\0\4\11\1\47"+
    "\2\11\1\46\44\11\1\0\1\50\10\0\1\50\5\0"+
    "\21\50\1\0\10\50\2\0\1\50\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\1\41\1\51\17\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\13\41\1\52\5\41\1\0"+
    "\1\41\1\53\1\54\5\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\2\41\1\55"+
    "\2\41\1\56\13\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\5\41"+
    "\1\57\13\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\2\41\1\60"+
    "\16\41\1\0\10\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\3\41\1\61\15\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\3\41\1\62\15\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\63\2\0"+
    "\1\42\1\43\1\0\21\41\1\0\10\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\17\41\1\64\1\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\2\41"+
    "\1\65\16\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\3\41\1\66"+
    "\15\41\1\0\10\41\2\0\1\41\5\0\1\67\10\0"+
    "\1\67\5\0\21\67\1\0\10\67\2\0\1\67\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\3\41"+
    "\1\70\15\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\1\41\1\71"+
    "\17\41\1\0\10\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\15\41\1\72\3\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\3\41\1\73\15\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\17\41\1\74\1\41\1\0\10\41"+
    "\2\0\1\41\62\0\1\75\60\0\1\12\20\0\1\42"+
    "\42\0\10\44\1\76\50\44\61\10\61\11\1\0\2\77"+
    "\7\0\1\77\2\0\1\50\1\100\1\0\21\77\1\0"+
    "\10\77\2\0\1\77\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\2\41\1\101\16\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\14\41\1\102\4\41\1\0\10\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\6\41\1\103\12\41\1\0\6\41\1\104\1\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\20\41\1\105\1\0\10\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\3\41\1\106\15\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\3\41"+
    "\1\107\15\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\17\41\1\110"+
    "\1\41\1\0\10\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\10\41\1\111\10\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\17\41\1\112\1\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\13\41\1\113\5\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\6\41\1\114\12\41\1\0\10\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\17\41\1\115\1\41\1\0\10\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\10\41\1\116\10\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\117\7\0\1\117\2\0\1\67\1\120\1\0\21\117"+
    "\1\0\10\117\2\0\1\117\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\21\41\1\0\1\41\1\121"+
    "\6\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\2\41\1\105\16\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\21\41\1\0\1\105\7\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\13\41\1\122\5\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\6\41"+
    "\1\123\12\41\1\0\10\41\2\0\1\41\4\0\7\44"+
    "\1\124\1\76\50\44\16\0\1\50\43\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\3\41\1\125\15\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\15\41\1\126\3\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\2\41\1\127\16\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\3\41\1\130\15\41\1\0\10\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\3\41\1\53\15\41\1\0\10\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\6\41\1\53\12\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\6\41"+
    "\1\125\12\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\20\41\1\131"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\11\41\1\132\7\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\2\41\1\133\16\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\10\41\1\134\10\41\1\0\10\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\21\41\1\0\3\41\1\135\4\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\20\41\1\136\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\11\41\1\137"+
    "\7\41\1\0\10\41\2\0\1\41\22\0\1\67\43\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\1\41"+
    "\1\140\17\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\14\41\1\141"+
    "\4\41\1\0\10\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\21\41\1\0\3\41"+
    "\1\142\4\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\10\41\1\143\10\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\72\2\0"+
    "\1\42\1\43\1\0\21\41\1\0\10\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\10\41\1\144\10\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\20\41"+
    "\1\53\1\0\10\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\1\41\1\145\17\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\1\41\1\146\17\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\3\41\1\147\15\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\17\41\1\150\1\41\1\0\10\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\20\41\1\125\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\1\41"+
    "\1\151\17\41\1\0\10\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\21\41\1\0"+
    "\2\41\1\105\5\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\2\41\1\152\16\41"+
    "\1\0\10\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\17\41\1\153\1\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\21\41\1\0\5\41\1\53\2\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\1\41\1\154\17\41\1\0\10\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\6\41\1\101\12\41\1\0\10\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\21\41\1\0\7\41\1\105\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\14\41\1\155"+
    "\4\41\1\0\10\41\2\0\1\41\5\0\2\41\7\0"+
    "\1\41\2\0\1\42\1\43\1\0\21\41\1\0\4\41"+
    "\1\105\3\41\2\0\1\41\5\0\2\41\7\0\1\41"+
    "\2\0\1\42\1\43\1\0\6\41\1\105\12\41\1\0"+
    "\10\41\2\0\1\41\5\0\2\41\7\0\1\41\2\0"+
    "\1\42\1\43\1\0\17\41\1\156\1\41\1\0\10\41"+
    "\2\0\1\41\5\0\2\41\7\0\1\41\2\0\1\42"+
    "\1\43\1\0\21\41\1\0\4\41\1\101\3\41\2\0"+
    "\1\41\5\0\2\41\7\0\1\41\2\0\1\42\1\43"+
    "\1\0\21\41\1\0\5\41\1\131\2\41\2\0\1\41"+
    "\5\0\2\41\7\0\1\41\2\0\1\42\1\43\1\0"+
    "\15\41\1\125\3\41\1\0\10\41\2\0\1\41\5\0"+
    "\2\41\7\0\1\41\2\0\1\42\1\43\1\0\21\41"+
    "\1\0\5\41\1\157\2\41\2\0\1\41\5\0\2\41"+
    "\7\0\1\41\2\0\1\42\1\43\1\0\3\41\1\160"+
    "\15\41\1\0\10\41\2\0\1\41\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4851];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\7\1\1\11\21\1\2\11\4\1\2\0"+
    "\1\1\1\0\1\11\2\0\16\1\1\0\5\1\1\11"+
    "\2\1\1\0\17\1\1\0\3\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _PuppetLexer() {
    this((java.io.Reader)null);
  }


  public _PuppetLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _PuppetLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_VIRTUAL;
          }
        case 16: break;
        case 11: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_OP_PROPERTY;
          }
        case 17: break;
        case 10: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_MODIFIER;
          }
        case 18: break;
        case 7: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_RIGHT_BRACE;
          }
        case 19: break;
        case 1: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_DIGITS;
          }
        case 20: break;
        case 5: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_OP_COMMA;
          }
        case 21: break;
        case 3: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 22: break;
        case 12: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_VARIABLE;
          }
        case 23: break;
        case 9: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_STRING;
          }
        case 24: break;
        case 4: 
          { yybegin(YYINITIAL); return PUPPET_LINE_COMMENT;
          }
        case 25: break;
        case 6: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_LEFT_BRACE;
          }
        case 26: break;
        case 2: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 27: break;
        case 8: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_CLASS_NAME;
          }
        case 28: break;
        case 15: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_FUNCTION;
          }
        case 29: break;
        case 14: 
          { yybegin(YYINITIAL); return PuppetTypes.PP_DEPENDENCY;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
